{"version":3,"sources":["utils/commonFunctions.js","serviceWorker.js","i18n/index.js","index.js","constants.js"],"names":["locale","numberFormatter","Intl","NumberFormat","maximumFractionDigits","isDevelopmentOrTest","getIndiaDate","utcToZonedTime","Date","getIndiaDateYesterdayISO","formatISO","subDays","representation","formatLastUpdated","unformattedDate","then","localePackage","LOCALE_SHORTHANDS","i18n","language","window","localStorage","i18nextLng","formatDistance","parseIndiaDate","isoDate","match","ISO_DATE_REGEX","INDIA_ISO_SUFFIX","formatDate","formatString","date","format","formatNumber","value","option","statistic","NAN_STATISTICS","includes","NaN","isNaN","number","Math","abs","floor","capitalize","s","charAt","toUpperCase","slice","toTitleCase","str","replace","txt","substr","toLowerCase","getStatistic","data","type","count","perMillion","movingAverage","STATISTIC_OPTIONS","normalizeByKey","PER_MILLION_OPTIONS","key","normalizeBy","multiplyFactor","meta","population","counted","registered","voted","other","isFinite","getTableStatistic","args","lastUpdatedTT","expired","differenceInDays","counted_LOOKBACK_DAYS","total","delta","fetcher","url","fetch","response","json","retry","fn","retriesLeft","interval","Promise","resolve","reject","catch","error","setTimeout","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","use","Backend","LanguageDetector","initReactI18next","init","debug","keySeparator","returnEmptyString","fallbackLng","load","saveMissing","interpolation","escapeValue","App","lazy","rootElement","document","getElementById","main","render","fallback","requestIdleCallback","IntersectionObserver","src","done","js","createElement","onload","onerror","Error","head","appendChild","loadScript","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","DATA_API_ROOT","english","STATISTIC_DEFINITIONS","displayName","color","options","seats","hideDelta","registeredRatio","votedRatio","definitions","Object","keys","reduce","acc","configs","STATISTIC_CONFIGS","PRIMARY_STATISTICS","TABLE_STATISTICS","TABLE_STATISTICS_EXPANDED","DISTRICT_TABLE_COUNT","D3_TRANSITION_DURATION","MINIGRAPH_LOOKBACK_DAYS","UNASSIGNED_STATE_CODE","UNKNOWN_DISTRICT_KEY","GOSPEL_DATE","SPRING_CONFIG_NUMBERS","clamp","precision","MAP_VIZS","CHOROPLETH","BUBBLES","MAP_VIEWS","STATES","DISTRICTS","MAP_TYPES","COUNTRY","STATE","MAPS_DIR","MAP_META","AA","geoDataFile","mapType","AF","AM","BG","DD","GA","HA","OR","SI","SO","SNNP","TI","TT","MAP_LEGEND_HEIGHT","STATE_NAMES","stateCodes","stateCodesMap","map","index","push","code","name","STATE_CODES"],"mappings":"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","file":"static/js/main.c289e612.chunk.js","sourcesContent":["import {\n  INDIA_ISO_SUFFIX,\n  ISO_DATE_REGEX,\n  LOCALE_SHORTHANDS,\n  NAN_STATISTICS,\n  PER_MILLION_OPTIONS,\n  STATISTIC_OPTIONS,\n  counted_LOOKBACK_DAYS,\n} from '../constants';\n\nimport {\n  differenceInDays,\n  format,\n  formatDistance,\n  formatISO,\n  subDays,\n} from 'date-fns';\nimport {utcToZonedTime} from 'date-fns-tz';\nimport i18n from 'i18next';\n\nlet locale = null;\nconst numberFormatter = new Intl.NumberFormat('en-US', {\n  maximumFractionDigits: 1,\n});\n\nconst getLocale = () => {\n  import('date-fns/locale/').then((localePackage) => {\n    locale =\n      localePackage[\n        LOCALE_SHORTHANDS[i18n.language || window.localStorage.i18nextLng]\n      ];\n  });\n};\n\nexport const isDevelopmentOrTest = () => {\n  if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test')\n    return true;\n  return false;\n};\n\nexport const getIndiaDate = () => {\n  return utcToZonedTime(new Date(), 'Africa/Addis_Ababa');\n};\n\nexport const getIndiaDateISO = () => {\n  return formatISO(getIndiaDate(), {representation: 'date'});\n};\n\nexport const getIndiaDateYesterday = () => {\n  return subDays(getIndiaDate(), 1);\n};\n\nexport const getIndiaDateYesterdayISO = () => {\n  return formatISO(getIndiaDateYesterday(), {representation: 'date'});\n};\n\nexport const formatLastUpdated = (unformattedDate) => {\n  getLocale();\n  return formatDistance(new Date(unformattedDate), new Date(), {\n    locale: locale,\n  });\n};\n\nexport const parseIndiaDate = (isoDate) => {\n  if (!isoDate) return getIndiaDate();\n  if (isoDate.match(ISO_DATE_REGEX)) isoDate += INDIA_ISO_SUFFIX;\n  return utcToZonedTime(new Date(isoDate), 'Africa/Addis_Ababa');\n};\n\nexport const formatDate = (unformattedDate, formatString) => {\n  if (!unformattedDate) return '';\n  if (\n    typeof unformattedDate === 'string' &&\n    unformattedDate.match(ISO_DATE_REGEX)\n  )\n    unformattedDate += INDIA_ISO_SUFFIX;\n  const date = utcToZonedTime(new Date(unformattedDate), 'Africa/Addis_Ababa');\n  return format(date, formatString, {\n    locale: locale,\n  });\n};\n\nexport const abbreviateNumber = (number) => {\n  if (Math.abs(number) < 1e3) return numberFormatter.format(number);\n  else if (Math.abs(number) >= 1e3 && Math.abs(number) < 1e5)\n    return numberFormatter.format(number / 1e3) + 'K';\n  else if (Math.abs(number) >= 1e5 && Math.abs(number) < 1e7)\n    return numberFormatter.format(number / 1e5) + 'L';\n  else if (Math.abs(number) >= 1e7 && Math.abs(number) < 1e10)\n    return numberFormatter.format(number / 1e7) + 'Cr';\n  else if (Math.abs(number) >= 1e10 && Math.abs(number) < 1e14)\n    return numberFormatter.format(number / 1e10) + 'K Cr';\n  else if (Math.abs(number) >= 1e14)\n    return numberFormatter.format(number / 1e14) + 'L Cr';\n};\n\nexport const formatNumber = (value, option, statistic) => {\n  if (statistic && NAN_STATISTICS.includes(statistic) && value === 0)\n    value = NaN;\n\n  if (isNaN(value)) return '-';\n  else if (option === 'short') {\n    return abbreviateNumber(value);\n  } else if (option === 'int') {\n    value = Math.floor(value);\n  }\n  return numberFormatter.format(value) + (option === '%' ? '%' : '');\n};\n\nexport const capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport const toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\nexport const getStatistic = (\n  data,\n  type,\n  statistic,\n  {perMillion = false, movingAverage = false} = {}\n) => {\n  // TODO: Replace delta with daily to remove ambiguity\n  //       Or add another type for daily/delta\n  const {key, normalizeByKey: normalizeBy} = {\n    ...STATISTIC_OPTIONS[statistic],\n    ...(perMillion &&\n      !STATISTIC_OPTIONS[statistic]?.normalizeByKey &&\n      PER_MILLION_OPTIONS),\n  };\n\n  let multiplyFactor = STATISTIC_OPTIONS[statistic]?.multiplyFactor || 1;\n  multiplyFactor *=\n    (!STATISTIC_OPTIONS[statistic]?.normalizeByKey &&\n      perMillion &&\n      PER_MILLION_OPTIONS?.multiplyFactor) ||\n    1;\n\n  if (type === 'delta' && movingAverage) {\n    type = 'delta7';\n    multiplyFactor *=\n      (!STATISTIC_OPTIONS[statistic]?.normalizeByKey && 1 / 7) || 1;\n  }\n\n  let count;\n  if (key === 'population') {\n    count = type === 'total' ? data?.meta?.population : 0;\n  } else if (key === 'counted') {\n    count = data?.[type]?.counted;\n  } else if (key === 'active') {\n    const registered = data?.[type]?.registered || 0;\n    const counted = data?.[type]?.counted || 0;\n    const voted = data?.[type]?.voted || 0;\n    const other = data?.[type]?.other || 0;\n    count = registered - counted - voted - other;\n  } else {\n    count = data?.[type]?.[key];\n  }\n\n  if (normalizeBy) {\n    count /= getStatistic(\n      data,\n      normalizeBy === 'population' ? 'total' : type,\n      normalizeBy\n    );\n  }\n\n  return multiplyFactor * ((isFinite(count) && count) || 0);\n};\n\nexport const getTableStatistic = (data, statistic, args, lastUpdatedTT) => {\n  const expired =\n    (STATISTIC_OPTIONS[statistic].key === 'counted' ||\n      STATISTIC_OPTIONS[statistic].normalizeByKey === 'counted') &&\n    differenceInDays(\n      lastUpdatedTT,\n      parseIndiaDate(data.meta?.counted?.['last_updated'])\n    ) > counted_LOOKBACK_DAYS;\n\n  const total = !expired ? getStatistic(data, 'total', statistic, args) : 0;\n  const delta = !expired ? getStatistic(data, 'delta', statistic, args) : 0;\n  return {total, delta};\n};\n\nexport const fetcher = (url) => {\n  return fetch(url).then((response) => {\n    return response.json();\n  });\n};\n\nexport function retry(fn, retriesLeft = 5, interval = 1000) {\n  return new Promise((resolve, reject) => {\n    fn()\n      .then(resolve)\n      .catch((error) => {\n        setTimeout(() => {\n          if (retriesLeft === 1) {\n            // reject('maximum retries exceeded');\n            reject(error);\n            return;\n          }\n\n          // Passing on \"reject\" is the important part\n          retry(fn, retriesLeft - 1, interval).then(resolve, reject);\n        }, interval);\n      });\n  });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () =>\n      setTimeout(() => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n\n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      }, 3000)\n    );\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {isDevelopmentOrTest} from '../utils/commonFunctions';\n\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport {initReactI18next} from 'react-i18next';\n\nconst DEBUG = false;\n\ni18n\n  .use(Backend)\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    debug: isDevelopmentOrTest() && DEBUG,\n    keySeparator: false,\n    returnEmptyString: false,\n    fallbackLng: 'english',\n    load: 'languageOnly',\n    saveMissing: isDevelopmentOrTest() && DEBUG,\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","// import './wdyr';\nimport * as serviceWorker from './serviceWorker';\nimport './i18n';\nimport {retry} from './utils/commonFunctions';\n\nimport {Suspense, lazy, StrictMode} from 'react';\nimport {render} from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nconst App = lazy(() => retry(() => import('./App')));\nconst rootElement = document.getElementById('root');\n\nconst main = () =>\n  render(\n    <Suspense fallback={<div />}>\n      <Router>\n        <StrictMode>\n          <App />\n        </StrictMode>\n      </Router>\n    </Suspense>,\n    rootElement\n  );\n\nconst browserSupportsAllFeatures = () => {\n  return window.requestIdleCallback && window.IntersectionObserver;\n};\n\nconst loadScript = (src, done) => {\n  const js = document.createElement('script');\n  js.src = src;\n  js.onload = function () {\n    done();\n  };\n  js.onerror = function () {\n    done(new Error('Failed to load script ' + src));\n  };\n  document.head.appendChild(js);\n};\n\nif (browserSupportsAllFeatures()) {\n  main();\n} else {\n  loadScript(\n    'https://polyfill.io/v3/polyfill.min.js?version=3.52.1&features=requestIdleCallback%2CIntersectionObserver',\n    main\n  );\n}\n\nserviceWorker.register();\n","export const DATA_API_ROOT = `${process.env.PUBLIC_URL}`;\n\nexport const LOCALE_SHORTHANDS = {\n  english: 'en-US',\n};\n\nexport const STATISTIC_DEFINITIONS = {\n  registered: {\n    displayName: 'registered',\n    color: '#ff073a',\n    format: 'int',\n    options: {key: 'registered'},\n  },\n  seats: {\n    displayName: 'seats',\n    color: '#007bff',\n    format: 'short',\n    options: {key: 'seats'},\n    hideDelta: true,\n  },\n  voted: {\n    displayName: 'voted',\n    color: '#28a745',\n    format: 'int',\n    options: {key: 'voted'},\n  },\n/*  other: {\n    displayName: 'other',\n    format: 'int',\n    options: {key: 'other'},\n  },*/\n  counted: {\n    displayName: 'counted',\n    color: '#4b1eaa',\n    format: 'int',\n    options: {key: 'counted'},\n  },\n  registeredRatio: {\n    displayName: 'registered ratio',\n    format: '%',\n    options: {\n      key: 'registered',\n      normalizeByKey: 'registered',\n      multiplyFactor: 100,\n    },\n    hideDelta: true,\n  },\n  votedRatio: {\n    displayName: 'voted ratio',\n    format: '%',\n    options: {\n      key: 'voted',\n      normalizeByKey: 'voted',\n      multiplyFactor: 100,\n    },\n    hideDelta: true,\n  },\n  population: {\n    displayName: 'population',\n    format: 'short',\n    options: {key: 'population'},\n    hideDelta: true,\n  },\n};\n\nconst definitions = Object.keys(STATISTIC_DEFINITIONS).reduce(\n  (acc, statistic) => {\n    const {options, ...config} = STATISTIC_DEFINITIONS[statistic];\n    acc.options[statistic] = options;\n    acc.configs[statistic] = config;\n    return acc;\n  },\n  {options: {}, configs: {}}\n);\n\nexport const STATISTIC_CONFIGS = definitions.configs;\nexport const STATISTIC_OPTIONS = definitions.options;\n\nexport const PER_MILLION_OPTIONS = {\n  normalizeByKey: 'population',\n  multiplyFactor: 1e6,\n};\n\nexport const NAN_STATISTICS = [\n  'registered',\n  'voted',\n  'seats',\n  'counted',\n  'population',\n];\n\nexport const PRIMARY_STATISTICS = ['registered', 'voted', 'seats', 'counted'];\n\nexport const BRUSH_STATISTICS = ['registered', 'voted', 'seats'];\n\nexport const TABLE_STATISTICS = [...PRIMARY_STATISTICS];\n\nexport const TABLE_STATISTICS_EXPANDED = Object.keys(STATISTIC_DEFINITIONS);\n\nexport const UPDATES_COUNT = 5;\n\nexport const DISTRICT_TABLE_COUNT = 40;\n\nexport const D3_TRANSITION_DURATION = 300;\n\nexport const MINIGRAPH_LOOKBACK_DAYS = 20;\n\nexport const counted_LOOKBACK_DAYS = 7;\n\nexport const UNASSIGNED_STATE_CODE = 'UN';\n\nexport const UNKNOWN_DISTRICT_KEY = 'Unknown';\n\nexport const GOSPEL_DATE = '2020-04-26';\n\nexport const ISO_DATE_REGEX = /^\\d{4}-([0]\\d|1[0-2])-([0-2]\\d|3[01])$/g;\n\nexport const INDIA_ISO_SUFFIX = 'T00:00:00+05:30';\n\nexport const SPRING_CONFIG_NUMBERS = {clamp: true, precision: 1};\n\nexport const MAP_VIZS = {\n  CHOROPLETH: 0,\n  BUBBLES: 1,\n};\n\nexport const MAP_VIEWS = {\n  STATES: 0,\n  DISTRICTS: 1,\n};\n\nexport const MAP_TYPES = {\n  COUNTRY: 0,\n  STATE: 1,\n};\n\nexport const MAPS_DIR =\n  process.env.NODE_ENV === 'production' ? '/mini_maps' : '/projected_maps';\n\nexport const MAP_META = {\n  AA: {\n    geoDataFile: `${MAPS_DIR}/addis-abeba.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  AF: {\n    geoDataFile: `${MAPS_DIR}/afar.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  AM: {\n    geoDataFile: `${MAPS_DIR}/amhara.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  BG: {\n    geoDataFile: `${MAPS_DIR}/benishangul-gumz.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  DD: {\n    geoDataFile: `${MAPS_DIR}/dire-dawa.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  GA: {\n    geoDataFile: `${MAPS_DIR}/gambela.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  HA: {\n    geoDataFile: `${MAPS_DIR}/harari.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  OR: {\n    geoDataFile: `${MAPS_DIR}/oromia.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  SI: {\n    geoDataFile: `${MAPS_DIR}/sidama.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  SO: {\n    geoDataFile: `${MAPS_DIR}/somali.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  SNNP: {\n    geoDataFile: `${MAPS_DIR}/snnp.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  TI: {\n    geoDataFile: `${MAPS_DIR}/tigray.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  TT: {\n    geoDataFile: `${MAPS_DIR}/ethiopia.json`,\n    mapType: MAP_TYPES.COUNTRY,\n  },\n};\n\nexport const MAP_LEGEND_HEIGHT = 50;\n\nexport const STATE_NAMES = {\n  AA: 'Addis Ababa',\n  AF: 'Afar',\n  AM: 'Amhara',\n  BG: 'Benishangul Gumz',\n  DD: 'Dire Dawa',\n  GA: 'Gambela',\n  HA: 'Harari',\n  OR: 'Oromia',\n  SI: 'Sidama',\n  SO: 'Somali',\n  SNNP: 'SNNP',\n  TI: 'Tigray',\n  TT: 'Ethiopia',\n  [UNASSIGNED_STATE_CODE]: 'Unassigned',\n};\n\nconst stateCodes = [];\nconst stateCodesMap = {};\nObject.keys(STATE_NAMES).map((key, index) => {\n  stateCodesMap[STATE_NAMES[key]] = key;\n  stateCodes.push({code: key, name: STATE_NAMES[key]});\n  return null;\n});\nexport const STATE_CODES = stateCodesMap;\nexport const STATE_CODES_ARRAY = stateCodes;\n"],"sourceRoot":""}